#: Title : apache2
#: Author : "Caio Abreu Ferreira" <abreuferr_gmail.com>
#: Description : Implementing a web server
#: Options : Weight: 4

Description: Candidates should be able to install and configure a 
web server. This objective includes monitoring the servers load 
and performance, restricting client user access, configuring support 
for scripting languages as modules and setting up client user 
authentication. Also included is configuring server options to restrict 
usage of resources. Candidates should be able to configure a web server 
to use virtual hosts and customize file access.

Key Knowledge Areas:
- Apache 2.4 configuration files, terms and utilities
- Apache log files configuration and content
- Access restriction methods and files
- mod_perl and PHP configuration
- Client user authentication files and utilities
- Configuration of maximum requests, minimum and maximum servers and clients
- Apache 2.4 virtual host implementation (with and without dedicated IP addresses)
- Using redirect statements in Apaches configuration files to customize file access

Terms and Utilities:
- access logs and error logs
- .htaccess
- httpd.conf
- mod_auth_basic, mod_authz_host and mod_access_compat
- htpasswd
- AuthUserFile, AuthGroupFile
- apachectl, apache2ctl
- httpd, apache2

#
# Teoria
#

#       /etc/apache2/
#       |-- apache2.conf
#       |       `--  ports.conf
#       |-- mods-enabled
#       |       |-- *.load
#       |       `-- *.conf
#       |-- conf-enabled
#       |       `-- *.conf
#       `-- sites-enabled
#               `-- *.conf

# principal arquivo de configuracao do apache2 que contem 
# os paramatros globais de configuracao do apache2.
#
# /etc/apache2/apache2.conf

# diretorio que contem varios arquivos de configuracao.
#
# /etc/apache2/conf-available/

# diretorio que contem varios arquivos de configuracao e
# que estao ativos. Link simbolico para os arquivos presentes
# no diretorio /etc/apache2/conf-available.
#
# cat /etc/apache/apache.conf
#	Include generic snippets of statements
#	IncludeOptional conf-enabled/*.conf
#
# /etc/apache2/conf-enable/

# arquivo que contem uma serie de variaveis de configuracao 
# do apache2.
#
# /etc/apache2/envvars

# diretorio que contem uma serie de arquivos de configuracao
# do modulos presentes no apache2.
#
# /etc/apache2/mods-available/

# diretorio que contem uma serie de arquivos de configuracao
# dos modulos presentes no apache2. neste caso, os arquivos
# sao links simbolicos que apontam para o diretorio
# /etc/apache2/mods-available e sao utilizados para ativar
# os modulos.
#
# cat /etc/apache/apache.conf
#	Include module configuration:
#	IncludeOptional mods-enabled/*.load
#	IncludeOptional mods-enabled/*.conf
#
# para visualizar quais modulos estao ativos no apache2
# basta executar o comando "apache2ctl -M".
#
# /etc/apache2/mods-enable/

# arquivo que define quais portas o apache2 ira trabalhar.
#
# cat /etc/apache/apache.conf
#	Include list of ports to listen on
#	Include ports.conf
#
# /etc/apache2/ports.conf

# diretorio que contem arquivos de configuracao dos 
# dominios virtuais.
#
# /etc/apache2/sites-available/

# diretorio que contem os arquivos de configuracao
# dos sites que estao ativos. os arquivos sao links
# simbolicos que apontam para o diretorio /sites-available
#
# cat /etc/apache/apache.conf
#	Include the virtual host configurations:
#	IncludeOptional sites-enabled/*.conf
#
# /etc/apache2/sites-enable/

#
# Instalacao
#

# instalacao do apache 
$ sudo apt-get install apache2

# instalacao do modulo para controlar requisicao do apache2
$ sudo apt-get install libapache2-mpm-itk -y -d

# fastcgi
$ sudo apt-get install libapache2-mod-fcgid -y -d

# instalacao do modulo PHP no Apache2
$ sudo apt-get install php7.0 libapache2-mod-php7.0 -y -d

# instalacao do modulo Perl no Apache2
$ sudo apt-get install libapache2-mod-perl2 -y -d

#
# Log
#

# arquivo de log referente aos acesso
$ sudo cat /var/log/apache2/access.log

# arquivo de log referente aos erros
$ sudo cat /var/log/apache2/error.log

# parametros definidos no arquivo
# /etc/apache2/apache2.conf
	LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-agent}i\""

	%h endereco IP do cliente que acesso a pagina
	%l a identidade do cliente determinada pelo identd na maquina do cliente.
	%u o userid do cliente se for requisitado a autenticacao.
	%t data e hora em que foi solicitado a requisicao
	\"%r\" informacoes como o metodo http utilizado, o caminh do da requisicao de informacao e protocolo http utilizado pelo cliente
	%>s o codigo do status que o servidor envia de volta para o cliente
	%b o tamanho do objeto requisitado

#
# Controle de requisicao
#

# configuracao do modulo MPM, modulo instalado por padrao.
#
$ sudo vi /etc/apache2/mods-available/mpm_event.conf
	<IfModule mpm_event_module>
		# numero inicial de processos que o apache inicializa.
		StartServers		3

		# numero minimo de thread inativos, aguardando conexao.
		MinSpareThreads		25

		# numero maximo de thread inativos, aguardando conexao.
		MaxSpareThreads		75

		# numero limite de threads.
		ThreadLimit		64

		# numero de threads em processos filho.
		ThreadsPerChild		25

		# numero maximo de requisicoes simultaneos.
		MaxRequestWorkers	30

		# numero maximo de conexoes por processos filho.
		MaxConnectionsPerChild	1000
	</IfModule>

#
# Virtual Host
#

# diretorio a onde sera armazenado os arquivos do site
# particula.com.br/www.particula.local
$ sudo mkdir -p /var/www/particula.local/html

# arquivo indice do site
$ sudo vi /var/www/particula.local/html/index.html
	apache.particula.local

# alterando a permissao do diretorio a onde esta armazenado
# os arquivos referentes ao dominio particula.local
$ sudo chown -R www-data: /var/www/particula.local

# arquivo de configuracao do dominio particula.local
$ sudo vi /etc/apache2/sites-available/particula.local.conf
	# criacao do virtual host
	# qualquer ip * e porta 80
	<VirtualHost *:80>
		# dominio que o site ira responder.
		ServerName particula.local
		
		# todos os outros dominios ou subdominios que 
		# que ira ser utilizado por esse host.
		ServerAlias www.particula.local

		# e-mail do administrador do site.
		ServerAdmin webmaster@particula.local

		# DocumentRoot: diretorio a onde sera armazenado 
		# os arquivos deste dominio.
		DocumentRoot /var/www/particula.local/html

		# diretivas referente ao diretorio
		<Directory /var/www/particula.local/html>
			# Indexes: previne as diretivas listadas.
			# FollowSymLinks: quando essa opcao eh ativada, 
			# o apache ira seguir os links simbolicos
			Options Indexes FollowSymLinks
		
			# AllowOverride: especifica quais diretivas que 
			# foram declaradas no arquivo .htaccess e que serao 
			# sobrepostas as direticas da configuracao padrao
			AllowOverride none
			Order allow,deny
			Allow from all
			Require all granted
		</Directory>

		# nome o localizacao dos arquivos de log
		ErrorLog ${APACHE_LOG_DIR}/particula.local-error.log
		CustomLog ${APACHE_LOG_DIR}/particula.local-access.log combined
	</VirtualHost>

# ativar as diretivas de configuracao - forma automatica
$ sudo a2ensite particula.local
# ativar as diretivas de configuracao - forma manual
$ sudo ln -s /etc/apache2/sites-available/particula.local.conf /etc/apache2/sites-enabled/

# checagem da configuracao do apache2
$ sudo apache2ctl configtest

# reler as configuracoes do apache
$ sudo apache2ctl graceful

#
# Modulo Perl
#

# alterando o arquivo de configuracao do dominio para permitir que o mesmo
# possa trabalhar com a liguagem de programacao Perl.
$ sudo vi /etc/apache2/sites-available/particula.local.conf
	<VirtualHost *:80>
	(...)
	# perl
	PerlModule ModPerl::Registry
	SetHandler perl-script
	PerlHandler ModPerl::Registry
	PerlSendHeader On
	ScriptAlias /cgi-bin/ /var/www/particula.local/cgi-bin/
	AddHandler cgi-script .pl
	TypesConfig /etc/mime.types
	<Directory /var/www/particula.local/cgi-bin>
		Options +ExecCGI
	</Directory>
	(...)

# testando o arquivo de configuracao
$ sudo apache2ctl configtest

# reinicializar o apache2
$ sudo apache2ctr restart

# arquivo para teste.
#
$ sudo mkdir -p /var/www/particula.local/cgi-bin/
$ sudo vi /var/www/particula.local/cgi-bin/perltest.pl
	#!/usr/bin/perl
	print "Content-type: text/html\n\n";
	print "Hello, World.";

# teste
$ sudo perl -Tw /var/www/particula.local/cgi-bin/perltest.pl
$ w3m http://www.particula.local/cgi-bin/perltest.pl

#
# Autenticacao de acesso via usuario/grupo e senha
#

# ativar o modulo "authz_groupfile" para que a opcao
# "AuthgroupFile [FILE]" possa ser utilizada.
#
$ sudo a2enmod authz_groupfile

# arquivos com as diretivas de autenticacao.
$ sudo vi /var/www/particula.local/.htaccess
	# habilitar a autenticacao
	AuthType Basic
	AuthName "processo de autenticacao de acesso"
		
	# nao existe a possibilidade de autenticacao tanto
	# por usuario quanto por grupo. Eh necessario que
	# seja escolhido somente uma forma de autenticacao.
	AuthUserFile /var/www/particula.local/webpass.user
	Require valid-user
	
	# quando a opcao AuthGroupFile eh ativada, a opcao
	# "Require valid-user" deve ser substituida pela
	# opcao "Require group [GRUPO]"
	AuthGroupFile /var/www/particula.local/webpass.group
	Require group particula

$ sudo /etc/apache2/sites-available/particula.local.conf
	<VirtualHost *:80>
		(...)
		# a diretiva "AccessFileName" so eh necessaria
		# se por acaso o nome do arquivo .htaccess for
		# outro.
		AccessFileName .htaccess
		<Directory /var/www/particula.local/html>
			Options Indexes FollowSymLinks MultiViews
			AllowOverride All
			Order allow,deny
			Allow from all
		</Directory>
		(...)
	</VirtualHost>

# checagem da configuracao do apache2
$ sudo apachectl configtest

# reinicializar o apache2
$ sudo systemctl restart apache2

# criar o arquivo webpass a onde sera armazenado o usuario
# e a senha dele.
$ sudo htpasswd -c /var/www/particula.local/webpass.user [USUARIO]

# adicionar novos usuario ao arquivo webpass.user
$ sudo htpasswd /var/www/particula.local/webpass.user [USUARIO]

# grupo de usuarios.
$ sudo vi /var/www/particula.local/webpass.group
	particula: cosmo caio

# alterando as permissoes do arquivo
$ sudo chown www-data /var/www/particula.local/webpass.*
$ sudo chmod 640 /var/www/particula.local/webpass.*

#
# Autenticacao via LDAP
#

# ativando modulo
$ sudo a2enmod authnz_ldap

# apache2
$ sudo vi /etc/apache2/sites-available/particula.local.conf
	<VirtualHost *:80>
		(...)
		<Directory /var/www/particula.local/html>
			Options Indexes FollowSymLinks MultiViews
			AllowOverride None
			Order deny,allow
			Deny from All

			AuthType Basic
			AuthBasicProvider ldap
			AuthzLDAPAuthoritative off
			AuthName "Test OPenLDAP login"
			AuthLDAPURL "ldap://192.168.0.13/ou=users,dc=particula,dc=local?uid?sub?(objectClass=*)"
			Require valid-user
			Satisfy any
		</Directory>
	</VirtualHost>

# reinicializando o apache.
$ sudo systemctl restart apache2

#
# Restricao de acesso a arquivo
#

# utilizacao da diretiva <FILES> para controlar o acesso a
# determinado arquivo.
#
# a diretiva <FILES> trabalha com arquivo, desta forma, nao
# importa a onde o arquivo esteja localizado, o acesso sempre
# sera bloqueado, mesmo que esteja dentro de um subdiretorio.
#
# esse bloquei é devido a diretiva "Deny all", negando todo o
# acesso.

$ sudo vi /etc/apache2/sites-available/particula.local.conf
	<VirtualHost *:80>
	(...)
	<Directory /var/www/particula.local/html>
		(...)
		<Files private.html>
			Order allow,deny
			Deny from all
		</Files>
	</Directory>

# testes
$ w3m http://IP_WEBSERVER/private.html
	You don't have permission to access /private.html on this server.

$ w3m http://IP_WEBSERVER/subdir/private.html
	You don't have permission to access /private.html on this server.

#
# Exportar o diretorio do usuario
#

# habilitar o modulo
$ sudo a2enmod userdir
$ sudo ln -s /etc/apache2/mods-available/userdir.conf /etc/apache2/mods-enabled/

# permissao
$ sudo chmod 711 /home/caio/
$ sudo chown caio:caio /home/caio/public_html/
$ sudo chmod 755 /home/caio/public_html/

# index.html
$ vi /home/caio/public_html/index.html

# configurar o modulo
$ sudo cp /etc/apache2/mods-available/userdir.conf /etc/apache2/mods-available/userdir.conf.origin
$ sudo vi /etc/apache2/mods-available/userdir.conf
	<IfModule mod_userdir.c>
        	UserDir enabled caio
        	UserDir public_html
	</IfModule>

	<Directory /home/*/public_html>
        	AllowOverride FileInfo AuthConfig Limit Indexes
        	Options MultiViews Indexes SymLinksIfOwnerMatch IncludesNoExec
        	Require method GET POST OPTIONS
	</Directory>

# teste
$ w3m http://IP_APACHE_SERVER/~caio/

#
# Security Apache
#

# neste caso, a configuracao abaixo sera refletida em todos
# os dominios virtuais, visto que os parametros foram
# acrescentados no arquivo de configuracao geral do apache.
#
$ sudo vi /etc/apache2/apache2.conf
	# nao exibe a versao do apache
	ServerSignature Off
	ServerTokens Prod
