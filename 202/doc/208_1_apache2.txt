#: Title : apache2
#: Author : "Caio Abreu Ferreira" <abreuferr_gmail.com>
#: Description : Implementing a web server
#: Options : Weight: 4

Description: Candidates should be able to install and configure a 
web server. This objective includes monitoring the server’s load 
and performance, restricting client user access, configuring support 
for scripting languages as modules and setting up client user 
authentication. Also included is configuring server options to restrict 
usage of resources. Candidates should be able to configure a web server 
to use virtual hosts and customize file access.

Key Knowledge Areas:
- Apache 2.4 configuration files, terms and utilities
- Apache log files configuration and content
- Access restriction methods and files
- mod_perl and PHP configuration
- Client user authentication files and utilities
- Configuration of maximum requests, minimum and maximum servers and clients
- Apache 2.4 virtual host implementation (with and without dedicated IP addresses)
- Using redirect statements in Apache’s configuration files to customize file access

Terms and Utilities:
- access logs and error logs
- .htaccess
- httpd.conf
- mod_auth_basic, mod_authz_host and mod_access_compat
- htpasswd
- AuthUserFile, AuthGroupFile
- apachectl, apache2ctl
- httpd, apache2

#
# INSTALACAO
#

# instalacao do apache 
$ sudo apt-get install apache2

# instalacao do modulo para controlar requisicao do apache2
$ sudo apt-get install libapache2-mpm-itk -y -d

# instalacao do modulo PHP no Apache2
$ sudo apt-get install php7.0 libapache2-mod-php7.0 -y -d

# instalacao do modulo Perl no Apache2
$ sudo apt-get install libapache2-mod-perl2

#
# CONFIGURACAO
#

# principal arquivo de configuracao do apache2e que contem 
# os paramatros globais de configuracao do apache2.
$ /etc/apache2/apache2.conf

# diretorio que contem varios arquivos de configuracao.
$ /etc/apache2/conf-available/

# diretorio que contem varios arquivos de configuracao e
# que estao ativos. Link simbolico para os arquivos presentes
# no diretorio /etc/apache2/conf-available.
$ /etc/apache2/conf-enable/

# arquivo que contem uma serie de variaveis de configuracao 
# do apache2.
$ /etc/apache2/envvars

# diretorio que contem uma serie de arquivos de configuracao
# do modulos presentes no apache2.
$ /etc/apache2/mods-available/

# diretorio que contem uma serie de arquivos de configuracao
# dos modulos presentes no apache2. neste caso, os arquivos
# sao links simbolicos que apontam para o diretorio
# /etc/apache2/mods-available e sao utilizados para ativar
# os modulos.
$ /etc/apache2/mods-enable/

# arquivo que define quais portas o apache2 ira escutar
# e trabalhar.
$ /etc/apache2/ports.conf

# diretorio que contem arquivos de configuracao dos 
# dominios virtuais.
$ /etc/apache2/sites-available/

# diretorio que contem os arquivos de configuracao
# dos sites que estao ativos. os arquivos sao links
# simbolicos que apontam para o diretorio /sites-available
$ /etc/apache2/sites-enable

#
# LOG
#

# arquivo de log referente aos acesso
$ sudo cat /var/log/apache2/access.log

# arquivo de log referente aos erros
$ sudo cat /var/log/apache2/error.log

# parametros definidos no arquivo
# /etc/apache2/apache2.conf
	LogFormat "%h %l %u %t \"%r\" %>s %b"

	%h – endereco IP do cliente que acesso a pagina
	%l – a identidade do cliente determinada pelo identd na maquina do cliente.
	%u – o userid do cliente se for requisitado a autenticacao.
	%t – data e hora em que foi solicitado a requisicao
	\"%r\" – informacoes como o metodo http utilizado, o caminh do da requisicao de informacao e protocolo http utilizado pelo cliente
	%>s – o codigo do status que o servidor envia de volta para o cliente
	%b – o tamanho do objeto requisitado

#
# MAXIMUM REQUESTS
#

# configuracao do modulo MPM, modulo instalado por padrao.
$ sudo vi /etc/apache2/mods-available/mpm_event.conf
	<IfModule mpm_event_module>
		# numero inicial de processos que o apache inicializa.
		StartServers		3

		# numero minimo de thread inativos, aguardando conexao.
		MinSpareThreads		25

		# numero maximo de thread inativos, aguardando conexao.
		MaxSpareThreads		75

		# numero limite de threads.
		ThreadLimit		64

		# numero de threads em processos filho.
		ThreadsPerChild		25

		# numero maximo de requisicoes simultaneos.
		MaxRequestWorkers	30

		# numero maximo de conexoes por processos filho.
		MaxConnectionsPerChild	1000
	</IfModule>

#
# VIRTUAL HOST
#

# diretorio a onde sera armazenado os arquivos do site
# particula.com.br/www.particula.local
$ sudo mkdir -p /var/www/particula.local/html

# arquivo indice do site
$ sudo vi /var/www/particula.local/html/index.html
	<!DOCTYPE html>
	<html lang="en" dir="ltr">
        	<head>
                	<meta charset="utf-8">
	                <title>Welcome to particula.local</title>
	        </head>
	        <body>                
        	        <h1>Success! particula.local home page!</h1>
	        </body>                             
	</html>

# alterando a permissao do diretorio a onde esta armazenado
# os arquivos referentes ao dominio particula.local
$ sudo chown -R www-data: /var/www/particula.local

# arquivo de configuracao do dominio particula.local
$ sudo vi /etc/apache2/sites-available/particula.local.conf
	# criacao do virtual host
	# qualquer ip * e porta 80
	<VirtualHost *:80>
		# dominio que o site ira responder.
		ServerName particula.local
		
		# todos os outros dominios ou subdominios que 
		# que ira ser utilizado por esse host.
		ServerAlias www.particula.local

		# e-mail do administrador do site.
		ServerAdmin webmaster@particula.local

		# DocumentRoot: diretorio a onde sera armazenado 
		# os arquivos deste dominio.
		DocumentRoot /var/www/particula.local/html

		# diretivas referente ao diretorio
		<Directory /var/www/particula.local/html>
			# Indexes: previne as diretivas listadas.
			# FollowSymLinks: quando essa opcao eh ativada, 
			# o apache ira seguir os links simbolicos
			Options -Indexes +FollowSymLinks
		
			# AllowOverride: especifica quais diretivas que 
			# foram declaradas no arquivo .htaccess e que serao 
			# sobrepostas as direticas da configuracao padrao
			AllowOverride All
			Require all granted
		</Directory>

		# nome o localizacao dos arquivos de log
		ErrorLog ${APACHE_LOG_DIR}/particula.local-error.log
		CustomLog ${APACHE_LOG_DIR}/particula.local-access.log combined
	</VirtualHost>

	OU

	# criacao do virtual host
	<VirtualHost 192.168.0.8:80>
		# dominio que o site ira responder
		ServerName particula.local
		
		# todos os outros dominios ou subdominios que 
		# ser utilizado por esse host.
		ServerAlias www.particula.local

		# e-mail do administrador do site.
		ServerAdmin webmaster@particula.local

		# DocumentRoot: diretorio a onde sera armazenado 
		# os arquivos deste dominio.
		DocumentRoot /var/www/particula.local/html

		# diretivas referente ao diretorio.
		<Directory /var/www/particula.local/html>
			# Indexes: previnde as diretivas listadas.
			# FollowSymLinks: quando essa opcao eh ativada, 
			# o apache ira seguir os links simbolicos
			Options -Indexes +FollowSymLinks
		
			# AllowOverride: especifica quais diretivas que 
			# foram declaradas no arquivo .htaccess e que serao 
			# sobrepostas as direticas da configuracao padrao
			AllowOverride All
		</Directory>

		# nome o localizacao dos arquivos de log
		ErrorLog ${APACHE_LOG_DIR}/particula.local-error.log
		CustomLog ${APACHE_LOG_DIR}/particual.local-access.log combined
	</VirtualHost>

# ativar as diretivas de configuracao
$ sudo a2ensite particula.local

# reler as configuracoes do apache
$ sudo apache2ctl restart

# criacao do link simbolico de forma manual
$ sudo ln -s /etc/apache2/sites-available/particula.local.conf /etc/apache2/sites-enabled/

# checagem da configuracao do apache2
$ sudo apache2ctl configtest

#
# MODULO PERL
#

# alterando o arquivo de configuracao do dominio para permitir que o mesmo
# possa trabalhar com a liguagem de programacao Perl.
$ sudo vi /etc/apache2/sites-available/particula.local.conf
	<VirtualHost *:80>
	(...)
	PerlModule ModPerl::Registry
	<Directory /var/www/particula.local/html>
		SetHandler perl-script
		PerlHandler ModPerl::Registry
		PerlSendHeader On

		# ativando a opcao de trabalhar com uma linguagem
		# de programacao
		Options +ExecCGI
		AllowOverride None
	</Directory>
	(...)

# arquivo para teste.
$ sudo vi /var/www/particula.local/html/perltest.pl
	##!/usr/bin/perl -w
	print "Content-type: text/html\r\n\r\n";
	print "Hello there!<br />\nJust testing .<br />\n";

	for ($i=0; $i<10; $i++)
	{
		print $i."<br />";
	}

# reinicializar o apache2
$ sudo apache2ctr restart

# teste
$ w3m http://www.particula.local/perltest.pl

###
# Client USER authentication files and utilities - .htaccess
###

$ sudo /etc/apache2/sites-available/particula.local.conf
	<VirtualHost *:80>
	    (...)
	    <Directory /var/www/particula.local/html>
		# habilitar a autenticacao atraves do arquivo .htaccess
	        AllowOverride All
	        Require all granted
	    </Directory>
	    (...)
	</VirtualHost>

	OU

	<VirtualHost 192.168.0.8:80>
	    (...)
	    <Directory /var/www/particula.local/html>
		# habilitar a autenticacao atraves do arquivo .htaccess
	        AllowOverride All
	        Require all granted
	    </Directory>
	    (...)
	</VirtualHost>

$ sudo systemctl restart apache2 ; reinicializar o apache2
$ sudo apachectl configtest ; checagem da configuracao do apache2

# criar o arquivo webpass a onde sera armazenado o usuario
# <cosmo> e a senha dele.
$ sudo htpasswd -c /var/www/particula.local/webpass cosmo

# alterando as permissoes do arquivo
$ sudo chown www-data /var/www/particula.local/webpass
$ sudo chmod 640 /var/www/particula.local/webpass

# arquivos .htaccess para o controle de acesso ao site 
$ sudo vi /var/www/particula.local/html/.htaccess
	# ativando a autenticacao.
	AuthType Basic

	# texto que ira aparecer na caixa de dialogo
	AuthName "Restricted Access"

	# arquivo a onde fica armazenado o usuario e senha
	AuthUserFile /var/www/particula.local/webpass

	# autenticacao de usuario
	Require user cosmo

###
# Client GROUP authentication files and utilities - .htaccess
###

$ htpasswd /var/www/particula.local/htgroup cosmo
$ cat /var/www/particula.local/htgroup
	admins: cosmo admin

# alterando as permissoes do arquivo
$ sudo chown www-data /var/www/particula.local/htgroup
$ sudo chmod 640 /var/www/particula.local/htgroup

# arquivos .htaccess para o controle de acesso ao site 
$ sudo vi /var/www/particula.local/html/.htaccess
	AuthType Basic

	# texto que ira aparecer na caixa de dialogo
	AuthName "Restricted Access"

	# arquivo a onde fica armazenado o grupo de usuarios
	AuthGroupFile "/var/www/particula.local/htgroup"

	# autenticacao de usuario
	Require group admins

###
# Security Apache
###

# neste caso, a configuracao abaixo sera refletida em todos
# os dominios virtuais, visto que os parametros foram
# acrescentados no arquivo de configuracao geral do apache.
$ sudo vi /etc/apache2/apache2.conf
	# nao exibe a versao do apache
	ServerSignature Off
	ServerTokens Prod
