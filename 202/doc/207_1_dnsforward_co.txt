#: Title : dns forwarder
#: Author : "Caio Abreu Ferreira" <abreuferr_gmail.com>
#: Description : basic dns server configuration - CentOS
#: Options : Weight: 3

Description: Candidates should be able to configure BIND to function as a 
caching-only DNS server. This objective includes the ability to manage a 
running server and configuring logging.

Key Knowledge Areas:
- BIND 9.x configuration files, terms and utilities
- Defining the location of the BIND zone files in BIND configuration files
- Reloading modified configuration and zone files
- Awareness of dnsmasq, djbdns and PowerDNS as alternate name servers

The following is a partial list of the used files, terms and utilities:
- /etc/named.conf
- /var/named/
- /usr/sbin/rndc
- kill
- host
- dig

#
# Teoria
#

# um servidor de dns do tipo FORWARD transfere todas as
# solicitacoes de resolucao de nome para outro servidor 
# dns visto que o mesmo nao possui a capacidade de resolucao
# de nome, ele simplesmente encaminha essa solicitacao para
# outro servidor de dns. O resultado do pedido de resolucao
# eh armazenado localmente para agilizar futuras solicitacoes
# e enviado para o host que fez a requisicao.

#
# Instalacao
#

# atualizacao
$ sudo yum upgrade

# instalacao
$ sudo yum install bind.x86_64 bind-utils.x86_64 

# systemd
$ sudo systemctl start named
$ sudo systemctl enable named
$ sudo systemctl status named

# firewall
$ sudo firewall-cmd --permanent --zone=public --add-service=dns
$ sudo firewall-cmd --reload

#
# Configuracao
#

# backup
$ sudo cp /etc/named.conf{,.origin}

# configuracao do bind para ser um servidor dns forward.
$ sudo vi /etc/named.conf
	// foi criada a acl de nome "clients" com o objetivo 
	// de definir quais hosts pertencem a ACL. Neste caso,
	// os hosts presentes na rede 192.168.0.0/24 pertence
	// a acl CLIENTS.
	acl "clients" {
		192.168.0.0/24;
	};

	options {
        	// diretorio a onde estao armazenados os arquivos 
		// de configurcao do bind e da zona.
        	directory "/var/named/";

		// o bind ficara escutando a porta 53 e ira
		// responder a requisicoes vindas do 127.0.0.1
		// e de estacoes provenientes de "clients".
		listen-on port 53 { 127.0.0.1; clients; };

		// se por acaso a resposta estiver no cache, o
		// servidor ira enviar para o resolver. se por
		// acaso nao tiver a resposta, ira requisitar
		// a outro servidor a resposta da requisicao.
		recursion yes;

		// somente localhost e estacoes que estiverem na 
		// ACL poderao serao atendidas requisicao de recursao.
		allow-recursion { 127.0.0.1; clients; };

		// somente estacoes que estiverem na ACL poderao
		// fazer a requisicao, QUERY, de resolucao de um 
		// dominio.
		allow-query { 127.0.0.1; clients; };

		// - o servidor do tipo FORWARDER executa somente o 
		// processo de consulta, ele nao eh responsavel por
		// manter uma zona.
		// - ONLY limita as consultas a somente os
		// servidores que estao cadastrados na opcao
		// FORWARDERS, no exemplo abaixo, 8.8.8.8 e 4.4.4.4
		// - FIRST - primeira requisicao eh enviada para um
		// servidor FORWARDERS. A proxima para o outro servidor.
		// FORWARDERS. Opcao interessante pois nao sobrecarrega
		// um servidor com requisicao, faz uma especie de balan_
		// ceamento de carga.
		forward only;

		// - lista de servidores dns que serao utilizados
		// para reponder a requisicao por parte dos hosts
		// presentes na rede definida na ACL.
		// - primeiro eh consultado no cache local, se por
		// acaso nao for encontrado a resposta, sera encaminhado
		// para os encaminhadores.
		forwarders {
			8.8.8.8;
			8.8.4.4;
		};
};

# checando os arquivos de configuracao
# named-checkconf [OPCAO] [ARQUIVO]
#	-p - exibe o conteudo o darquivo named.conf
#	-x - semelhante a opcao -p mas omite os dados secretos.
#	-z - executa o teste em todos os arquivos de configuracao de ZONA.
$ sudo named-checkconf /etc/named.conf

# utilizacao da ferramenta rndc para reler
# as configuracoes feitas no arquivo de configuracao
# do bind, named.conf.options.
$ sudo rndc reload
	server reload successful

# comando utilizado para limpar o cache do servidor
# de nome bind.
$ sudo rndc flush

# resolv.conf do dns forward, 192.168.0.5
$ sudo vi /etc/resolv.conf
	domain particula.local
	search particula.local
	nameserver 127.0.0.1

# resolv.conf de todas as estacoes da rede
$ sudo vi /etc/resolv.conf
	domain particula.local
	search particula.local
	nameserver 192.168.0.5

#
# TESTE - DIG
#

# limpando o dns-cache
$ sudo rndc flush

$ dig kernel.org | grep time
	;; Query time: 355 msec
$ dig kernel.org | grep time
	;; Query time: 1 mse

#
# TESTE - TCPDUMP
#

# limpando o dns-cache
$ sudo rndc flush

# gravar os dados da captura em um arquivo.
$ sudo tcpdump -i ens33 udp port 53 -w cache.pcap

# ler os resultados da captura.
$ sudo tcpdump -n -t -r cache.pcap port 53
	# o host 192.168.0.42 faz uma consulta ao servidor dns-forward 192.168.0.5
	# referente ao dominio kernel.org.
	IP 192.168.0.42.55637 > 192.168.0.5.53: 23291+ [1au] A? kernel.org. (39)

	# o dns-forward 192.168.0.5 faz uma consulta ao Google, 8.8.4.4
	IP 192.168.0.5.37668 > 8.8.4.4.53: 18870+ [1au] A? kernel.org. (39)

	# O Google 8.8.4.4 envia a resposta para o dns-forward 192.168.0.5
	IP 8.8.4.4.53 > 192.168.0.5.37668: 18870 1/0/1 A 198.145.29.83 (55)

	# o dns-forward envia a resposta para o host 192.168.0.42
	IP 192.168.0.5.53 > 192.168.0.42.55637: 23291 1/0/1 A 198.145.29.83 (55)

# ler os resultados da captura.
$ sudo tcpdump -n -t -r cache.pcap port 53
	# o host 192.168.0.42 consulta o dns-forward 192.168.0.42 referente ao
	# dominio kernel.org.
	IP 192.168.0.42.60422 > 192.168.0.5.53: 29489+ [1au] A? kernel.org. (39)

	# o dns-foward ja tem a resposta devido a requisicao anterior e ja
	# envia a reposta para o host.
	IP 192.168.0.5.53 > 192.168.0.42.60422: 29489 1/0/1 A 198.145.29.83 (55)

# esse teste  demonstra que o servidor dns-forward guardou os dados da 
# requisicao anterior e na segunda requisicao nao fez a consulta na 
# internet, ele simplesmente leu o resultado que ele possui em cache e 
# enviou para o host.
