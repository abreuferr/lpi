#: Title : Mandatory Access Control
#: Author : "Caio Abreu Ferreira" <abreuferr_gmail.com>
#: Description : Mandatory Access Control
#: Options : Weight: 5

Description: Candidates should be familiar with mandatory access control (MAC) systems for Linux. Specifically, candidates should have a thorough knowledge of SELinux. Also, candidates should be aware of other mandatory access control systems for Linux. This includes major features of these systems but not configuration and use.

Key Knowledge Areas:

- Understand the concepts of type enforcement, role based access control, mandatory access control and discretionary access control 
- Configure, manage and use SELinux 
- Awareness of AppArmor and Smack 

Partial list of the used files, terms and utilities:

getenforce
setenforce
selinuxenabled
getsebool
setsebool
togglesebool
fixfiles
restorecon
setfiles
newrole
setcon
runcon
chcon
semanage
sestatus
seinfo
apol
seaudit
audit2why
audit2allow
/etc/selinux/*

# 
# AppArmor
#

1. Introdução

# AppArmor é um sistema de Controle de Acesso Mandatório (MAC - Mandatory Access Control) 
# construído sobre a interface LSM (Linux Security Modules) do Linux. Na prática, o kernel 
# consulta o AppArmor antes de cada chamada do sistema para saber se o processo está autorizado 
# a fazer a operação dada. Através desse mecanismo, o AppArmor confina programas a um conjunto 
# limitado de recursos.
# 
# O AppArmor aplica um conjunto de regras (conhecido como “profile/profile”) em cada programa. O 
# profile aplicado pelo kernel depende do caminho de instalação do programa que está sendo executado. 
# Ao contrário do SELinux, as regras aplicadas não dependem do usuário. Todos os usuários enfrentam 
# o mesmo conjunto de regras quando estão executando o mesmo programa (mas as permissões de usuário 
# tradicionais ainda se aplicam e podem resultar em comportamentos diferentes!).
# 
# Os perfis AppArmor são armazenados em /etc/apparmor.d/ e eles contém uma lista de regras de 
# controle de acesso em recursos que cada programa pode fazer uso. Os perfis são compilados e carregados
# no kernel pelo comando apparmor_parser. Cada profile pode ser carregado tanto em modo "enforcing" 
# quanto em modo "complaining". 
#
# O profile em modo "enforcing" detecta violações das regras de profile do AppArmor, como o programa 
# com profile acessando arquivos não permitidos pelo profile. As violações são registradas e não permitidas. 
# O padrão é que o modo forçado seja habilitado. Para registrar apenas as violações, mas ainda assim 
# permiti-las, use o modo "complaining".
#
# O profile em modo "complain" ou em modo reclamação/aprendizagem detecta violações das regras de profile 
# do AppArmor, como o programa com profile acessando arquivos não permitidos pelo profile. As violações são 
# permitidas, mas também registradas. Para melhorar o profile, ative o modo complain, execute o programa 
# por meio de um conjunto de testes para gerar eventos de registro que caracterizem as necessidades de 
# acesso do programa e, em seguida, pós-processar o registro com as ferramentas do AppArmor para transformar
# eventos de registro em perfis aprimorados.
# 
# Apparmor é uma estrutura de segurança que impede que os aplicativos se tornem mal. Por exemplo, 
# se eu executo o Firefox e visito um site mal intensionado que tenta instalar malware que exclui 
# minha home pasta, o Apparmor coloca limites no Firefox, impedindo-o de fazer o que eu não quero 
# (como acessar minhas músicas, documentos, etc.). Dessa forma, mesmo se seu aplicativo estiver 
# comprometido, nenhum dano poderá ser causado.

2. Permissão

# Segue abaixo uma lista de permissões que podem ser utilizadas dentro do Apparmor
# utilizadas para controlar os aplicativos.
#
# regra para arquivo
#
# 	r - read - ler arquivo
# 	w - write - escrever arquivo
#   m - memory map - permitir o mapeamento da execução
# 	l - link
# 	k - lock/travar arquivo
# 	a - append
#
# regra para executavel
#
# - Inherit (ix) - Herdar execução
# O filho herda o profile do pai, executando com os mesmos controles de acesso que o pai. Este modo é 
# útil quando um programa confinado precisa chamar outro programa confinado sem obter as permissões 
# do profile do alvo ou perder as permissões do profile atual. Este modo é freqüentemente usado quando 
# o programa filho é um aplicativo auxiliar, como o cliente /usr/bin/mail usando less como um pager. 
# Cria uma regra que é denotada por “ix” no profile, faz com que o binário executado herde permissões 
# do profile pai.
#
# - Child (Cx)
# Cria uma regra que é denotada por “Cx” no profile, requer que um subprofile seja criado dentro do 
# profile pai e as regras devem ser geradas separadamente para este filho (prompts aparecerão ao 
# executar varreduras no pai).
#
# - Profile (px/Px) - Execução de profile discreto
# O filho é executado usando seu próprio profile, que deve ser carregado no kernel. Se o profile não 
# estiver presente, as tentativas de execução do filho falharão com permissão negada. Isso é útil se 
# o programa pai estiver chamando um serviço global, como pesquisas de DNS ou enviando e-mail com o 
# MTA do seu sistema.
#
# Escolha o profile com a opção clean exec (Px) para limpar o ambiente de variáveis de ambiente que 
# podem modificar o comportamento de execução quando passadas para o processo filho.
# 
# - Unconfined (ux/Ux) - Execução sem restrições
# O filho é executado completamente não confinado, sem nenhum profile do AppArmor aplicado ao recurso 
# executado.
#
# Escolha a opção não confinado com clean exec (Ux) para limpar o ambiente de variáveis de ambiente 
# que podem modificar o comportamento de execução quando passadas para o processo filho. Observe que 
# a execução de perfis não confinados apresenta uma vulnerabilidade de segurança que pode ser usada 
# para escapar do AppArmor. Use-o apenas como último recurso.

3. Controle de acesso

# Através do Apparmor, é possivel controlar os seguintes itens:
#
# - files
# - Linux capabilities
# - network
# - mount, remount and umount
# - pivot_root
# - ptrace
# - signal
# - DBus
# - unix domain sockets

4. Instalação

# instalação

$ apt install apparmor apparmor-utils apparmor-profiles apparmor-profiles-extra

# status do systemctl do Apparmor

$ sudo systemctl status apparmor

# Apparmor e systemctl

$ sudo systemctl status apparmor
$ sudo systemctl start apparmor
$ sudo systemctl stop apparmor
$ sudo systemctl reload apparmor
$ sudo systemctl enable apparmor

5. Comandos

5.1 Status

# Comando utilizado para exibir o status dos profiles que estão em execução

$ sudo aa-status
$ sudo cat /sys/kernel/security/apparmor/profiles

# O comando "aa-unconfined" lista os programas que não estão associados a nenhum profile
# e que acessam a internet.

$ sudo aa-unconfined --paranoid

5.2 Criar um profile Stand-Alone

# comando utilizado para criar um profile para um determinado programa, no exemplo abaixo, 
# esta sendo utilizado o aplicativo W3M.
#
# será criado um profile para o aplicativo W3M no diretório "/etc/apparmor.d/" de nome 
# "usr.bin.w3m"

$ sudo aa-genprof w3m

# depois de executar o comando para criar o profile do aplicativo W3M, deve-se abrir
# um segundo terminal e acessar qualquer URL com o aplicativo W3M para que o aplicativo
# aa-genprof possa coletar uma série de informações e criar o profile do aplicativo.
#
# será feito uma série de perguntas por parte do aa-genprof com o objetivo de criar
# o profile do aplicativo W3M, /etc/apparmor.d/usr.bin.w3m

5.3 Criar um profile de forma aproximada

# O comando cria um profile aproximado para um determinado aplicativo.

$ sudo aa-autodep w3m

5.4 Criar um profile de forma facil

# O comando "aa-easyprof" cria o esqueleto do profile do aplicativo. O arquivo de configuração
# contem somente o esqueleto de um arquivo de configuração.

$ sudo aa-easyprof /usr/bin/w3m > /etc/apparmor.d/usr.bin.w3m
$ sudo apparmor_parser -r  /etc/apparmor.d/usr.bin.w3m

# Depois de criado o arquivo esqueleto com o arquivo de configuração, deve-se executar o aplicativo 
# que se deseja bloquear para que o Apparmor possa coletar uma série de informações referentes 
# a execução do mesmo. Todas as informações são armazenadas no arquivo "/var/log/syslog".
#
# Depois de colatada essas informações, deve-se executar o comando "aa-logprof" para realmente
# inicializar o processo de configuração do Apparmor para filtrar a execução do aplicativo.

$ sudo aa-logprof

5.5 Modo Complain

# O comando abaixo ira colocar um determinado profile em modo "complain". 

$ sudo aa-complain /etc/apparmor.d/usr.bin.w3m

5.6 Modo Enforce

# O comando abaixo ira colocar um determinado profile em modo "enforce".

$ sudo aa-enforce /etc/apparmor.d/usr.bin.w3m

5.7 Carregar um profile

# O comando abaixo é utilizado para carregar um profile

$ sudo apparmor_parser -a /etc/apparmor.d/usr.bin.w3m

5.8 Recarregar um profile

# O comando abaixo é utilizado para recarregar um profile. Esse comando
# pode ser utilizado para recarregar o profile depois de foi feito qualquer
# tipo de alteração no arquivo de configuração do mesmo.

$ sudo apparmor_parser -r /etc/apparmor.d/usr.bin.w3m

5.9 Desabilitar um profile de forma permanente

# Os comandos abaixo irão desabilitar o profile de forma permanente.

$ sudo ln -s /etc/apparmor.d/usr.bin.w3m /etc/apparmor.d/disable
$ sudo systemctl restart apparmor

5.10 Desabilitar um profile

# Os comandos abaixo irão desabilitar o profile

$ sudo apparmor_parser -R /etc/apparmor.d/usr.bin.w3m
	OU
$ sudo aa-disable /etc/apparmor.d/usr.bin.w3m

5.11 Habilitar um profile

# Os comandos abaixo irão habilitar o profile

$ sudo apparmor_parser /etc/apparmor.d/usr.bin.w3m

5.12 Apagar um profile de forma permanente

# Os comandos abaixo irão remover o profile do Apparmor.

$ sudo apparmor_parser -R /etc/apparmor.d/usr.bin.w3m
$ sudo rm /etc/apparmor.d/usr.bin.w3m                

5.13 Apagar um profile desconhecido

# Os comandos abaixo são utilizados para listar e apagar os
# profiles que não estão no diretório /etc/apparmor.d/

$ sudo aa-remove-unknown -n
$ sudo aa-remove-unknown

6. Profile

6.1 Introdução

# Include Files
# "Include" são usadas para extrair partes de outros perfis do AppArmor para simplificar a estrutura de novos perfis.
#
# Abstractions
# "Abstractions" incluem instruções agrupadas por tarefas comuns do aplicativo.
# 
# Program Chunks
# "Program chunks" incluem instruções que contêm fragmentos de perfis específicos para conjuntos de programas.
# 
# Capability Entries
# "Capability Entries" são entradas de profile para qualquer um dos recursos POSIX.1e http://en.wikipedia.org/wiki/POSIX#POSIX.1 
# Linux que permitem um controle refinado sobre o que um processo confinado pode fazer por meio de chamadas de sistema 
# que requerem privilégios.
# 
# Network Access Control Entries
# "Network Access Control Entries" mediam o acesso à rede com base no tipo de endereço e na família.
# 
# Local Variable Definitions
# "Local variables" define os atalhos para caminhos.
# 
# File Access Control Entries
# "File Access Control Entries" especifica o conjunto de arquivos que um aplicativo pode acessar.
# 
# rlimit Entries
# "rlimit entries" defini e controla os limites de recursos de um aplicativo.

6.2 Exemplo

# O "include" lê um arquivo que contem definição de variaveis.
#include <tunables/global>

# O caminho normalizado do aplictivo que será monitorado.
#
# As chaves {} servem como um contêiner para incluir instruções, subperfis, 
# entradas de caminho, entradas de "capability" e entradas de "network".
/usr/bin/foo {

	# Esta diretiva puxa componentes dos perfis do AppArmor para 
	# simplificar os perfis.
	#include <abstractions/base>

	# As instruções de entrada de "capability" habilitam um dos 29 recursos de POSIX.1e.
	capability setgid,

	# Diretiva que determina o tipo de acesso à rede que o aplicativo pode ou não ter.
	# 
	# O AppArmor permite a mediação do acesso à rede com base no tipo de endereço e na família.
	# O seguinte exemplo ilustra a sintaxe da regra de acesso à rede:
	#
	# network [[<domain>][<type>][<protocol>]]
	#
	# Domínios suportados: inet, ax25, ipx, appletalk, netrom, bridge, x25, inet6, rose, netbeui, 
	#	security, key, packet, ash, econet, atmsvc, sna, pppox, wanpipe, bluetooth, unix, atmpvc,
	#	netlink, llc, can, tipc, iucv, rxrpc, isdn, phonet, ieee802154, caif, alg, nfc, vsock
	#
	# Tipos suportados: stream, dgram, seqpacket, rdm, raw, packet
	#
	# Protocolos suportados tcp, udp, icmp
	#
	# network,
	# network inet,
	# network inet6,
	# network inet stream,
	# network inet tcp,
	# network tcp,
	#
	network inet tcp,

	# Regra de link que define a origem e o destino de um link.
	link /etc/sysconfig/foo -> /etc/foo.conf,
	/bin/mount            ux,

	# As chaves {} permitem cada uma das possibilidades listadas, uma das quais é a string
	# vazia.
	/dev/{,u}random       r,

	# Uma entrada de caminho que especifica quais áreas do sistema de arquivos o programa 
	# pode acessar. 
	#
	# A primeira parte de uma entrada de caminho especifica o caminho absoluto de um arquivo
	# (incluindo expressão regular globbing) e a segunda parte indica os modos de acesso 
	# permitidos (por exemplo, "r" para leitura, "w" para gravação e "x" para execução). 
	#
	# Um espaço em branco de qualquer tipo (espaços ou tabulações) pode preceder o nome do 
	# caminho, mas deve separar o nome do caminho e o especificador de modo. Os espaços entre 
	# o modo de acesso e a vírgula final são opcionais.
	#
	# /some/random/example/* r - permite o acesso a leitura dos arquivos armazenados no diretório.
	# /some/random/example/ r - permite o acesso de leitura somente no diretório.
	# /some/**/ r - permite o acesso de leitura em qualquer diretório abaixo de "/some", mas não o diretório "/some/".
	# /some/random/example/** r - permite a leitura dos arquivos armazenados no diretório "/some/random/example"
	# /some/random/example/**[^/] r - permite a leitura do arquivos que estão no diretório "/some/random/example". Explicitamente o diretório ([^/]) é excluido.
	/etc/ld.so.cache      r,
	/etc/foo/*            r,
	/lib/ld-*.so*         mr,
	/lib/lib*.so*         mr,
	/proc/[0-9]**         r,
	/usr/lib/**           mr,
	/tmp/                 r,
	/tmp/foo.pid          wr,
	/tmp/foo.*            lrw,

	# Essa variável se expande para um valor que pode ser alterado sem alterar todo o profile.
	#
	# As variaveis são definidas nos arquivos que estão armazenadas no diretório "/etc/apparmor.d/tunables/"
	/@{HOME}/.foo_file    rw,
	/@{HOME}/.foo_lock    kw,
	
	# Uma regra condicional do proprietário/owner que concede permissão de leitura(r) e gravação(w)
	# em arquivos pertencentes ao usuário.
	owner /shared/foo/**  rw,

	# Esta entrada define uma transição para o profile local /usr/bin/foobar.
	/usr/bin/foobar       Cx,

	# Uma transição de profile nomeado para o profile bin_generic localizado no escopo global.
	/bin/**               Px -> bin_generic,

	# a comment about foo's local (children) profile for /usr/bin/foobar.
	#
	# O profile local /usr/bin/foobar é definido nesta seção.
	profile /usr/bin/foobar {
		/bin/bash          rmix,
		/bin/cat           rmix,
		/bin/more          rmix,
		/var/log/foobar*   rwl,
		/etc/foobar        r,
	}

	# foo's hat, bar.
	#
	# Esta seção faz referência a um subprofile “hat” do aplicativo.
	^bar {
		/lib/ld-*.so*         mr,
		/usr/bin/bar          px,
		/var/spool/*          rwl,
	}
}

#
# Apparmor e Nginx
#

1. Instalação

# Atualização do GNU/Linux Debian
#
$ sudo apt-get update

# Instalação do Nginx
#
$ sudo apt-get install nginx

# Instalação do Apparmor
#
$ apt install apparmor apparmor-profiles apparmor-utils apparmor-profiles-extra

2. Configuração do Nginx

# Criação do diretório onde será armazenado a pagina do site cujo acesso esta liberado.
#
$ sudo mkdir -p /data/www/safe

# Criação do diretório onde será armazenado a pagina do site cujo acesso NÃO esta liberado.
#
$ sudo mkdir -p /data/www/unsafe

# Página que será exibida quando o usuário tentar acessar o site no teste inicial.
#
$ sudo vi /data/www/safe/index.html
<html>
    <b>Hello! Accessing this file is allowed.</b>
</html>

# Página que será exibida quando o usuário tentar acessar o site no teste incial. Depois que
# o Apparmor estiver habilitado, essa página não será exibida, o que será exibido é uma mensagem
# de erro do browser de acesso negado, erro 403.
#
$ sudo vi /data/www/unsafe/index.html
<html>
    <b>Hello! Accessing this file is NOT allowed.</b>
</html>

# Configuração do Nginx para aceitar o acesso no dominio localhost.
#
$ sudo vi /etc/nginx/nginx.conf
(...)
http {
	(...)
    
    include /etc/nginx/conf.d/*.conf;

    server {
        listen 8080;
        location / { 
                root /data/www;
        }
    }
    (...)
}

# O comando abaixo é utilizado para testar o arquivo de configuração do Nginx a procura de
# algum tipo de erro que possa vir a existir.
#
$ sudo nginx -s reload

# Os comandos abaixo são utilizados para testar o Nginx em relação as páginas de teste do
# Apparmor.
#
$ w3m http://localhost:8080/safe/index.html 
$ w3m http://localhost:8080/unsafe/index.html

3. Apparmor

# O comando "aa-autodep" é utilizado para criar um arquivo de configuração do profile do
# Nginx em branco.
#
$ cd /etc/apparmor.d/
$ sudo aa-autodep nginx

# Depois de criado o arquivo de configuração do profile do Nginx, será necessário colocar 
# o profile em modo "complain".
#
$ sudo aa-complain nginx

# Reinicalizaro Nginx.
#
$ sudo systemctl restart nginx

# A partir deste ponto, deve-se acessar as páginas "safe" e "unsafe" para que sejam 
# registradas no log do Nginx e esses logs serão utilizados para a configuração do
# profile do Nginx no Apparmor.
#
$ w3m http://localhost:8080/safe/index.html 
$ w3m http://localhost:8080/unsafe/index.html

# Utilizando os logs do Nginx que foram gerados através dos comandos acima, será possivel
# construir o profile do Nginx junto ao Apparmor.
#
$ sudo aa-logprof

# Editando o profile do Apparmor.
#
$ sudo vi /etc/apparmor.d/usr.sbin.nginx

#include <tunables/global>

# Configuracao do binario do Nginx.
/usr/sbin/nginx {
  #include <abstractions/apache2-common>
  #include <abstractions/base>
  #include <abstractions/nis>

  # Os "capability" permitem que o Nginx crie novos processos.
  #
  capability chown,
  capability dac_override,
  capability dac_read_search,
  capability net_bind_service,
  capability setgid,
  capability setuid,
  capability sys_resource,

  # system files for baseauth and more.
  #
  /etc/group r,
  /etc/nsswitch.conf r,
  /etc/passwd r,

  # Binário e Processo do Nginx.
  #
  /usr/sbin/nginx mr,
  /run/nginx.pid rw,

  # Arquivos de configuraçãoo do Nginx e dos domínios administrados
  # pelo Nginx.
  #
  /etc/nginx/conf.d/ r,
  /etc/nginx/conf.d/nginx-mtls.conf r,
  /etc/nginx/fastcgi_params r,
  /etc/nginx/mime.types r,
  /etc/nginx/nginx.conf r,
  /etc/nsswitch.conf r,
  /etc/ssl/openssl.cnf r,
  /etc/nginx/snippets/ r,

  # Arquivos dos sites. Os três sites estao com a configuração de somente
  # leitura "r", mas o site "unsafe" esta com o acesso negado.
  #
  /data/www/safe/* r,
  deny /data/www/unsafe/* r,
  /etc/nginx/sites-enabled/* r,

  # Arquivos de log gerados pelo Nginx. Na configuração abaixo,
  # sera permitido a escrita no arquivos de log.
  #
  /var/log/nginx/access.log w,
  /var/log/nginx/error.log w,

}

# O comando "aa-enforce" coloca o profile do Nginx em modo "Enforce"
#
$ sudo aa-enforce nginx

# O processo do Nginx sera reinicializado. Verificar o arquivos de log se por
# acaso existir algum tipo de problema para carregar o Nginx.
#
$ sudo systemctl restart nginx

# Comando utilizado para verificar o status dos profiles que o Apparmor
# esta monitorando.
#
$ sudo apparmor_status

4. Teste

# Os dois comandos abaixo sao utilizados para testar o Apparmor em relacao
# a exibição ou não das páginas dos sites. O Apparmor permitira que a somente
# a página "safe" seja exibida. Já a página "unsafe" deve apresentar uma mensagem
# de erro 403.
#
$ w3m http://localhost:8080/safe/index.html 
$ w3m http://localhost:8080/unsafe/index.html

5. Troubleshooting

# Arquivos que devem ser lidos em caso de algum tipo de problema tanto para
# carregar o Apparmor quanto o Nginx.
#
- /var/log/syslog
- /var/log/nginx/error.log

# Log
#
$ grep -i -rn -E 'apparmor=.*denied|apparmor=.*allowed' /var/log/

#
# MYSQL/MARIADB
#

1. Profile

$ cat /etc/apparmor.d/usr.sbin.mariadbd
$ cat /etc/apparmor.d/usr.sbin.mysqld

#include <tunables/global>

/usr/sbin/mysqld {
  #include <abstractions/base>
  #include <abstractions/nameservice>
  #include <abstractions/user-tmp>
  #include <abstractions/mysql>
  #include <abstractions/winbind>

# Allow system resource access
  /sys/devices/system/cpu/ r,
  /sys/devices/system/node/ r,
  /sys/devices/system/node/** r,
  /proc/*/status r,

  capability sys_resource,
  capability dac_override,
  capability setuid,
  capability setgid,
  capability sys_nice,

# Allow network access
  network tcp,

  /etc/hosts.allow r,
  /etc/hosts.deny r,

# Allow config access
  /etc/mysql/** r,

# Allow pid, socket, socket lock and other file access
  /run/mysqld/* rw,
  /var/run/mysqld/* rw,

# Allow systemd notify messages
  /{,var/}run/systemd/notify w,

# Allow execution of server binary
  /usr/sbin/mysqld mr,
  /usr/sbin/mysqld-debug mr,

# Allow plugin access
  /usr/lib/mysql/plugin/ r,
  /usr/lib/mysql/plugin/*.so* mr,

# Allow error msg and charset access
  /usr/share/mysql/ r,
  /usr/share/mysql/** r,
  /usr/share/mysql-@MYSQL_BASE_VERSION@/ r,
  /usr/share/mysql-@MYSQL_BASE_VERSION@/** r,

# Allow data dir access
  /var/lib/mysql/ r,
  /var/lib/mysql/** rwk,

# Allow data files dir access
  /var/lib/mysql-files/ r,
  /var/lib/mysql-files/** rwk,

# Allow keyring dir access
  /var/lib/mysql-keyring/ r,
  /var/lib/mysql-keyring/** rwk,

# Allow log file access
  /var/log/mysql/ r,
  /var/log/mysql/** rw,

# Allow access to openssl config
  /etc/ssl/openssl.cnf r,

}

# Re-ler o profile
#
$ sudo apparmor_parser -r -T /etc/apparmor.d/usr.sbin.mariadbd

# Colocar o profile do MySQL/MariaDB em modo "enforce"
#
$ sudo aa-enforce /etc/apparmor.d/usr.sbin.mariadbd

# Reinicializar o MySQL/MariaDB
#
$ systemctl restart mysql.service