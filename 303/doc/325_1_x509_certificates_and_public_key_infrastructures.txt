#: Title : X.509 Certificates and Public Key Infrastructures
#: Author : "Caio Abreu Ferreira" <abreuferr_gmail.com>
#: Description : X.509 Certificates and Public Key Infrastructures
#: Options : Weight: 5 

Description: Candidates should understand X.509 certificates and public 
key infrastructures. They should know how to configure and use OpenSSL 
to implement certification authorities and issue SSL certificates for 
various purposes.

Key Knowledge Areas:
- Understand X.509 certificates, X.509 certificate lifecycle, X.509 certificate fields and X.509v3 certificate extensions
- Understand trust chains and public key infrastructures
- Generate and manage public and private keys
- Create, operate and secure a certification authority
- Request, sign and manage server and client certificates
- Revoke certificates and certification authorities

The following is a partial list of the used files, terms and utilities:
- openssl, including relevant subcommands
- OpenSSL configuration
- PEM, DER, PKCS
- CSR
- CRL
- OCSP

0. Teoria

# PKI (Public Key Infraatructure)
#
# A infra-estrutura de chave pública (PKI) fornece os meios para estabelecer confiança, 
# vinculando chaves e identidades públicas, garantindo, assim, razoável segurança de que 
# estamos nos comunicando com segurança com quem pensamos com a pessoa certa. A PKI é 
# importante para o uso eficaz da criptografia de chave pública e é essencial para entender 
#e usar o protocolo SSL.
# 
# Usando criptografia de chave pública, podemos ter certeza de que apenas os dados criptografados 
# podem ser descriptografados com a chave privada correspondente. Se combinarmos isso com o uso 
# de um algoritmo de hash de mensagens para calcular uma assinatura, podemos ter certeza de que 
# os dados criptografados não foram violados. O que falta são alguns meios de garantir que a parte 
# com a qual estamos nos comunicando seja realmente quem eles dizem que são. Em outras palavras, 
# a confiança não foi estabelecida. É aqui que a PKI se encaixa.

# Certificado
#
# - No coração da PKI está algo chamado certificado.
#
# - Em termos simples, um certificado vincula uma chave pública com um nome distinto.
#
# - Um nome distinto é simplesmente o nome da pessoa ou entidade que possui a chave 
#   pública à qual está vinculada.
#
# - Um certificado é assinado com a chave privada do emissor e contém quase todas as 
#   informações necessárias para verificar sua validade. Ele contém informações sobre 
#   o assunto, o emissor e o período para o qual é válido. O principal componente que 
#   está faltando é o certificado do emissor. O certificado do emissor é o componente 
#   chave para verificar a validade de um certificado, pois contém a chave pública do 
#   emissor, necessária para verificar a assinatura no certificado do sujeito.
#
# - Um certificado é assinado com a chave privada do emissor e contém quase todas as 
#   informações necessárias para verificar sua validade
#   Os certificados também são criados com um número de série incorporado. O número 
#   de série é exclusivo apenas para o emissor do certificado. Dois certificados 
#   emitidos pelo mesmo emissor nunca devem receber o mesmo número de série. O número 
#   de série do certificado é frequentemente usado para identificar rapidamente um 
#   certificado

# Tipos de certificados
# 
# Wildcard: Os certificados recebem um nome comum quando criados, e o nome comum 
# corresponde à URL do site ou entidade usando o certificado.
# 
# SAN: Um certificado de nome alternativo da entidade (SAN) é um certificado que 
# pode ter vários nomes comuns associados ao certificado.
# 
# Assinatura de código: um certificado de assinatura de código seria usado para 
# assinar digitalmente o código do aplicativo que você criar.
#
# Autoassinado: um certificado autoassinado é usado pela CA root/raiz. Cada entidade 
# na PKI precisa de um certificado.
#
# Root/raiz: quando uma PKI é criada, a primeira autoridade de certificação instalada 
# é conhecida como CA root/raiz.

# Autoridade certificadora
#
# Uma autoridade de certificação (CA) é uma organização ou empresa que emite certificados
# A CA deve garantir, sem qualquer dúvida razoável, que todo certificado emitido contenha 
# uma chave pública emitida pela parte que alega ter emitido.
#
# Existem dois tipos básicos de CAs.
# 
# - CA privada - tem a responsabilidade de emitir certificados apenas para membros de sua 
# própria organização e também é confiável apenas para membros de sua própria organização.
# 
# - CA pública - como a VeriSign ou a Thawte, tem a responsabilidade de emitir certificados 
# para qualquer membro do público e deve ser confiável pelo público.

# Hierarquias de certificado
#
# Um certificado emitido por uma CA pode ser usado para emitir e assinar outro certificado, 
# se o certificado emitido for criado com as permissões apropriadas para isso. Dessa maneira, 
# os certificados podem ser encadeados.
#
# Na raiz da cadeia está o certificado da root da CA. Como está na raiz da cadeia 
# e não há outra autoridade para assinar seu certificado, a CA raiz assina seu próprio 
# certificado. Esse certificado é conhecido como certificado autoassinado.

# Extensões de certificado
#
# O formato mais amplamente aceito para certificados é o formato X.509. Existem 
# três versões do formato, conhecidas como X.509v1, X.509v2 e X.509v3. A revisão 
# mais recente do padrão foi introduzida em 1996, e a maioria, se não todos, o 
# software moderno agora o suporta. Um grande número de alterações foram feitas 
# entre o X.509v1 e o X.509v3, mas talvez um dos recursos mais significativos 
# introduzidos no padrão X.509v3 seja o suporte a extensões

# Formatos de certificado
#
# Existem diferentes formatos de certificado devido à maneira como as informações 
# são armazenadas no certificado. A seguir, identifica os formatos de arquivo comuns 
# para certificados:
#
# - DER/CER - Distinguished Encoding Rules (DER) e Canonical Encoding Rules (CER) 
#   são formatos de arquivos binários usados ​​para armazenar informações no arquivo
#   de certificado. Os arquivos formatados com DER podem ter uma extensão .der ou 
#   .cer.
#
# - PEM - Privacy-enhanced Electronic Mail (PEM) é um formato de arquivo ASCII que
#   pode ter uma extensão de arquivo .pem, .crt, .cer ou .key. Os arquivos PEM são 
#   muito comuns e começam com ----- BEGIN CERTIFICATE ----- e terminam com 
#   ----- END CERTIFICATE -----.
#
# - PFX/P12 - O formato Personal Information Exchange(PXF), também conhecido como 
#   formato P12 ou PKCS#12, é um formato de arquivo binário comum aos ambientes 
#   Microsoft para importar e exportar certificados. Os arquivos no formato PFX 
#   têm uma extensão .pfx ou .p12.
#
# - P7B -  O formato P7B, também conhecido como PKCS#7, é outro formato de arquivo
#  ASCII usado para armazenar informações de certificado. Se você abrir o arquivo 
# ASCII, verá que ele começa com o texto ----- BEGIN PKCS7 ----- e termina com 
# ----- END PKCS7 -----. Os arquivos P7B podem ter uma extensão .p7b ou .p7c..

# Listas de revogação de certificado
# 
# Depois que um certificado é emitido, geralmente é colocado em produção, onde 
# será distribuído para muitos clientes. Se um invasor comprometer a chave privada 
# associada, ele poderá usar o certificado, mesmo que não lhe pertença. Supondo 
# que o proprietário adequado esteja ciente do comprometimento, um novo certificado
# com um novo par de chaves deve ser obtido e colocado em uso. Nessa situação, 
# existem dois certificados para a mesma entidade - ambos são tecnicamente válidos, 
# mas um não deve ser confiável. O certificado comprometido eventualmente expirará, 
# mas, enquanto isso, como o mundo em geral saberá não confiar nele?
# 
# A resposta está em algo chamado lista de revogação de certificado (CRL). Uma 
# CRL contém uma lista de todos os certificados revogados emitidos por uma CA 
# que ainda precisam expirar. Quando um certificado é revogado, a CA declara 
# que o certificado não deve mais ser confiável.

# Protocolo de status de certificado online
#
# O Online Certificate Status Protocol (OCSP), formalmente especificado na RFC 2560, 
# é uma adição relativamente nova à PKI. Seu objetivo principal é resolver alguns dos 
# problemas de distribuição que tradicionalmente afetam as CRLs.
#
# Usando o OCSP, um aplicativo faz uma conexão com um respondente do OCSP e solicita 
# o status de um certificado, passando o número de série do certificado. O respondente 
# responde "bom", "revogado" ou "desconhecido". Uma resposta “boa” indica que o certificado
# é válido, até onde o respondente sabe. Isso não significa necessariamente que o 
# certificado já foi emitido, apenas que não foi revogado. Uma resposta "revogada" indica
# que o certificado foi emitido e que realmente foi revogado. Uma resposta "desconhecida"
# indica que o respondente não sabe nada sobre o certificado. Um motivo típico para essa 
# resposta pode ser que o certificado foi emitido por uma CA desconhecida pelo respondente.

1. Understand X.509 certificates, X.509 certificate lifecycle, X.509 certificate fields and X.509v3 certificate extensions
2. Understand trust chains and public key infrastructures
3. Generate and manage public and private keys

3.1 - OpenSSL

# versao
#
$ openssl verion
	OpenSSL 1.1.1d  10 Sep 2019

# diretorio de trabalho do OpenSSL
#
$ /etc/ssl/
	drwxr-xr-x 2 root root     20480 Oct 13 13:32 certs
	-rw-r--r-- 1 root root     11118 May 30 12:27 openssl.cnf
	drwx--x--- 2 root ssl-cert  4096 Oct 13 13:32 private

# comandos e parametros do OpenSSL
#
$ openssl help
	- Standard commands
	asn1parse         ca                ciphers           cms
	crl               crl2pkcs7         dgst              dhparam
	dsa               dsaparam          ec                ecparam
	enc               engine            errstr            gendsa
	genpkey           genrsa            help              list
	nseq              ocsp              passwd            pkcs12
	pkcs7             pkcs8             pkey              pkeyparam
	pkeyutl           prime             rand              rehash
	req               rsa               rsautl            s_client
	s_server          s_time            sess_id           smime
	speed             spkac             srp               storeutl
	ts                verify            version           x509

	- Message Digest commands (see the `dgst' command for more details)
	blake2b512        blake2s256        gost              md4
	md5               rmd160            sha1              sha224
	sha256            sha3-224          sha3-256          sha3-384
	sha3-512          sha384            sha512            sha512-224
	sha512-256        shake128          shake256          sm3

	- Cipher commands (see the `enc' command for more details)
	aes-128-cbc       aes-128-ecb       aes-192-cbc       aes-192-ecb
	aes-256-cbc       aes-256-ecb       aria-128-cbc      aria-128-cfb
	aria-128-cfb1     aria-128-cfb8     aria-128-ctr      aria-128-ecb
	aria-128-ofb      aria-192-cbc      aria-192-cfb      aria-192-cfb1
	aria-192-cfb8     aria-192-ctr      aria-192-ecb      aria-192-ofb
	aria-256-cbc      aria-256-cfb      aria-256-cfb1     aria-256-cfb8
	aria-256-ctr      aria-256-ecb      aria-256-ofb      base64
	bf                bf-cbc            bf-cfb            bf-ecb
	bf-ofb            camellia-128-cbc  camellia-128-ecb  camellia-192-cbc
	camellia-192-ecb  camellia-256-cbc  camellia-256-ecb  cast
	cast-cbc          cast5-cbc         cast5-cfb         cast5-ecb
	cast5-ofb         des               des-cbc           des-cfb
	des-ecb           des-ede           des-ede-cbc       des-ede-cfb
	des-ede-ofb       des-ede3          des-ede3-cbc      des-ede3-cfb
	des-ede3-ofb      des-ofb           des3              desx
	rc2               rc2-40-cbc        rc2-64-cbc        rc2-cbc
	rc2-cfb           rc2-ecb           rc2-ofb           rc4
	rc4-40            seed              seed-cbc          seed-cfb
	seed-ecb          seed-ofb          sm4-cbc           sm4-cfb
	sm4-ctr           sm4-ecb           sm4-ofb

# etapas para a geracao e utilizacao de um certificado
#
# - criacao da chave privada;
# - criacao do Certificate Signing Request (CSR);
# - envio do arquivo CSR para a CA;
# - instalacao do certificado enviado pela CA;

3.2 - Criacao das Chaves de Criptogafia

# Chave do tipo RSA
#
# a chave de criptografia eh armazenado no format PEM.
#
# - chave do tipo RSA (genrsa)
# - a chave eh protegida pelo algoritmo AES-128/192/256 (-aes128/192/256) (KEK)
# - arquivo de saida (-out particula_private.key)
# - tamanho da chave (2048)
$ openssl genrsa -aes128 -out particula_private.key 2048 ; AES
$ openssl genrsa -des3 -out particula_private.key 4096 ; 3DES

# criação da chave de criptografia SEM SENHA.
$ openssl genrsa -out particula_private-noenc.key 4096 -nodes

# visualizar a estrutura da chave de criptografia
$ openssl rsa -text -in particula_private.key

# exportar a chave publica
$ openssl rsa -in particula_private.key -pubout -out particula_public.key

# Chave do tipo DSA
#
# criacao da chave de criptografia do tipo DSA
$ openssl dsaparam -genkey 2048 | openssl dsa -out dsa.key -aes128

# Chave do tipo ECDSA
#
# criacao da chave de criptografia do tipo ECDSA
$ openssl ecparam -genkey -name secp256r1 | openssl ec -out ec.key -aes128

3.2 - Criacao do "Certificate Signing Request" (CSR)

# comando utilizado para criar o certificado CSR.
$ openssl req -new -key particula_private.key -out particula.csr

# comando utilizado para criar o certificado CSR COM A CHAVE PRIVADA SEM SENHA.
openssl req -new -key particula_private-noenc.key -out particula-noenc.csr

# antes de se enviar o certificado para a CA para ser assinado, eh interessante dar
# uma olhada no conteudo do certificado CSR para confirmar as informacoes que foram
# gravadas no certificado.
$ openssl req -text -in particula.csr -noout

3.3 - Criando um CSR a partir de um certificado jé existente

# as vezes eh necessario a re-criacao de um CSR a partir de um certificado ja existente,
# visto que nao foi feito nenhum tipo de alteracao nas informacoes do certificado. Para
# isso, basta executar o comando abaixo.
$ openssl x509 -x509toreq -in particula.crt -out particula.csr -signkey particula_private.key

3.4 - Criando um CSR a partir de um arquivo de configuracao

# existe a possibilidade de se criar um arquivo CSR de forma nao interativa, a partir
# de um arquivo de configuracao.
$ cat particula.cnf
	[req]
	prompt = no
	distinguished_name = dn
	req_extensions = ext
	input_password = [SENHA]

	[dn]
	CN = www.particula.local
	emailAddress = admin@particula.local
	O = particula ltda
	L = sao paulo
	C = br

	[ext]
	subjectAltName = DNS:www.particula.local,DNS:particula.local

# criacao do arquivo CSR a partir do arquivo "particula.cnf".
$ openssl req -new -config particula.cnf -key particula_private.key -out particula.csr

3.5 - Assinando o seu proprio certificado (CTR)

# o certificado contem a chave publica do requerente e algumas informacoes sobre
# o requerente.
#
# Criar certificado autoassinado usando openssl x509
# - O comando openssl x509 é um utilitário de certificado multiuso.
#
# - Pode ser usado para exibir informações de certificado, converter certificados
#   em vários formulários, assinar solicitações de certificado como uma "mini CA"
#   ou editar configurações de confiança de certificado
#
# - A última etapa para criar o certificado autoassinado é assinar a solicitação 
#   de assinatura do certificado.
#
# - Neste exemplo, o certificado openssl durará 365 dias.
#
# Usaremos nossa chave privada "particula_private.key" com "particula.csr" para
# assinar o certificado e gerar o certificado autoassinado server.ctr
#
# se por acaso "voce" possuir um servidor TLS para uso proprio, nao sera necessario
# a utilizacao de uma CA para assinar um certificado. DEsta forma, eh possivel auto
# assinar o certificado.
#
# criacao cd um certificado auto-assinado.
$ openssl x509 -req -days 365 -in particula.csr -signkey particula_private.key -out particula.ctr

# criacao cd um certificado auto-assinado SEM SENHA
$ openssl x509 -req -days 365 -in particula-noenc.csr -signkey particula_private-noenc.key -out particula-noenc.ctr

# eh possivel tambem criar um certificado auto-assinado a partir da chave privada.
$ openssl req -new -x509 -days 365 -key particula_private.key -out particula.ctr
$ openssl req -new -x509 -days 365 -key particula_private.key -out particula.ctr -subj "/C=br/L=sao paulo/O=particula ltda/CN=www.particula.local"

3.6 - Criando um certificado para mais de um hostname

# normalmente um certificado eh associado a somente um hostname, mas em determinadas
# situacoes, eh necessario que um certificado seja associado a mais de um hostname.
#
# existe dois mecanismos para suportar multiplos hostnames em um unico certificado. A
# primeria eh utilizando a extensao SAN (Subject Alternative Name) do protocolo X.509. A
# segunda opcao eh a utilizacao de wildcards, particula.local e *.particula.local).
$ cat particula.ext
	subjectAltName = DNS:*.particula.local,DNS:particula.local
$ openssl req -new -x509 -days 365 -key particula_private.key -out particula.crt -extfile particula.ext

3.7 - Examinar o certificado

# visualizacao do certificado
$ openssl req -text -in particula.crt -noout

3.8 - Convertendo o certificado

# - Certificado binario DER 
# contem o certificado X.509 no formato raw, utilizando a codificacao ASN.1.
# - Certificado ASCII PEM
# contem o certificado no formato de codificacao base64-encoded.
# - Chave binaria DER
# contem a chave primaria no formato raw, utilizando a codificacao DER ANS.1
# - Chave ASCII PEM
# contem a chave no formato de codificacao base64-encoded.
# - Certificado PKCS#7
# formato complexo do certificado desenhado para transportar assinado ou criptografado
# de dados.
# - Chave e certificado PKCS#12 PFX
# Consiste de um formato complexo que pode armazenar e proteger a chave do servidor em 
# torno de toda a corrente de certificados.

# conversao do formato DEM para o DER
$ openssl x509 -inform PEM -in particula.pem -outform DER -out particula.der

# conversao do formato DER para o PEM
$ openssl x509 -inform DER -in particula.der -outform PEM -out particula.pem

# conversao do formato PEM para o PKCS#12
$ openssl pkcs12 -export -name "Certificado Particula" -out particula.p12 -inkey particula.key -in particula.crt -certfile particula-chain.crt

# conversao do formato PEM para o PKCS#7
$ openssl crl2pkcs7 -nocrl -out fd.p7b -certfile fd.crt -certfile fd-chain.crt

# conversao do formato PKCS#7 para o PEM 
# openssl pkcs7 -in particula.p7b -print_certs -out particula.pem

4. Create, operate and secure a certification authority

# criando chave privada
$ openssl genrsa -des3 -out ca.key 4096

# visualizar o conteudo da chave privada
$ openssl rsa -noout -text -in ca.key

# criando uma Certificate Authority Certificate
$ openssl req -new -x509 -days 365 -key ca.key -out ca.cert.pem

$ visualizar o conteudo do certificado
$ openssl x509 -noout -text -in ca.cert.pem

# gerando a chave do servidor
$ openssl genrsa -des3 -out server.key 4096

# assinando o certificado (CSR)
$ openssl req -new -key server.key -out server.csr

# verificar o conteudo da chave
$ openssl rsa -noout -text -in server.key

# verificar o conteudo do Certificate Signing Request (CSR)
$ openssl req -noout -text -in server.csr

# Assinando um certificado com uma CA
#
# Neste comando, emitiremos esse certificado server.crt, assinado pelo 
# certificado raiz da CA ca.cert.pem e pela chave CA ca.key que criamos
# no comando anterior.
#
# O Openssl pega sua solicitação de assinatura (csr) e cria um certificado
# de servidor assinado (crt) válido por um ano. Ao fazer isso, precisamos 
# informar qual autoridade de certificação (CA) usar, qual chave de autoridade
# de certificação usar e qual chave de servidor assinar. Definimos o número
# de série usando CAcreateserial e produzimos a chave assinada no arquivo 
# chamado server.crt
$ openssl x509 -req -days 365 -in server.csr -CA ca.cert.pem -CAkey ca.key -CAcreateserial -out server.crt

# Visualizando o conteudo do certificado
$ openssl x509 -noout -text -in server.crt

5. Request, sign and manage server and client certificates
6. Revoke certificates and certification authorities
