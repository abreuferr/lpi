#: Title : X.509 Certificates and Public Key Infrastructures
#: Author : "Caio Abreu Ferreira" <abreuferr_gmail.com>
#: Description : X.509 Certificates and Public Key Infrastructures
#: Options : Weight: 5 

Description: Candidates should understand X.509 certificates and public 
key infrastructures. They should know how to configure and use OpenSSL 
to implement certification authorities and issue SSL certificates for 
various purposes.

Key Knowledge Areas:
- Understand X.509 certificates, X.509 certificate lifecycle, X.509 certificate fields and X.509v3 certificate extensions
- Understand trust chains and public key infrastructures
- Generate and manage public and private keys
- Create, operate and secure a certification authority
- Request, sign and manage server and client certificates
- Revoke certificates and certification authorities

The following is a partial list of the used files, terms and utilities:
- openssl, including relevant subcommands
- OpenSSL configuration
- PEM, DER, PKCS
- CSR
- CRL
- OCSP

1. Understand X.509 certificates, X.509 certificate lifecycle, X.509 certificate fields and X.509v3 certificate extensions
2. Understand trust chains and public key infrastructures

3. Generate and manage public and private keys

3.1 - OpenSSL

# versao
#
$ openssl verion
	OpenSSL 1.1.1d  10 Sep 2019

# diretorio de trabalho do OpenSSL
#
$ /etc/ssl/
	drwxr-xr-x 2 root root     20480 Oct 13 13:32 certs
	-rw-r--r-- 1 root root     11118 May 30 12:27 openssl.cnf
	drwx--x--- 2 root ssl-cert  4096 Oct 13 13:32 private

# comandos e parametros do OpenSSL
#
$ openssl help
	- Standard commands
	asn1parse         ca                ciphers           cms
	crl               crl2pkcs7         dgst              dhparam
	dsa               dsaparam          ec                ecparam
	enc               engine            errstr            gendsa
	genpkey           genrsa            help              list
	nseq              ocsp              passwd            pkcs12
	pkcs7             pkcs8             pkey              pkeyparam
	pkeyutl           prime             rand              rehash
	req               rsa               rsautl            s_client
	s_server          s_time            sess_id           smime
	speed             spkac             srp               storeutl
	ts                verify            version           x509

	- Message Digest commands (see the `dgst' command for more details)
	blake2b512        blake2s256        gost              md4
	md5               rmd160            sha1              sha224
	sha256            sha3-224          sha3-256          sha3-384
	sha3-512          sha384            sha512            sha512-224
	sha512-256        shake128          shake256          sm3

	- Cipher commands (see the `enc' command for more details)
	aes-128-cbc       aes-128-ecb       aes-192-cbc       aes-192-ecb
	aes-256-cbc       aes-256-ecb       aria-128-cbc      aria-128-cfb
	aria-128-cfb1     aria-128-cfb8     aria-128-ctr      aria-128-ecb
	aria-128-ofb      aria-192-cbc      aria-192-cfb      aria-192-cfb1
	aria-192-cfb8     aria-192-ctr      aria-192-ecb      aria-192-ofb
	aria-256-cbc      aria-256-cfb      aria-256-cfb1     aria-256-cfb8
	aria-256-ctr      aria-256-ecb      aria-256-ofb      base64
	bf                bf-cbc            bf-cfb            bf-ecb
	bf-ofb            camellia-128-cbc  camellia-128-ecb  camellia-192-cbc
	camellia-192-ecb  camellia-256-cbc  camellia-256-ecb  cast
	cast-cbc          cast5-cbc         cast5-cfb         cast5-ecb
	cast5-ofb         des               des-cbc           des-cfb
	des-ecb           des-ede           des-ede-cbc       des-ede-cfb
	des-ede-ofb       des-ede3          des-ede3-cbc      des-ede3-cfb
	des-ede3-ofb      des-ofb           des3              desx
	rc2               rc2-40-cbc        rc2-64-cbc        rc2-cbc
	rc2-cfb           rc2-ecb           rc2-ofb           rc4
	rc4-40            seed              seed-cbc          seed-cfb
	seed-ecb          seed-ofb          sm4-cbc           sm4-cfb
	sm4-ctr           sm4-ecb           sm4-ofb

# etapas para a geracao e utilizacao de um certificado
#
# - criacao da chave privada;
# - criacao do Certificate Signing Request (CSR);
# - envio do arquivo CSR para a CA;
# - instalacao do certificado enviado pela CA;

3.2 - Criacao das Chaves de Criptogafia

# Chave do tipo RSA
#
# a chave de criptografia eh armazenado no format PEM.
#
# - chave do tipo RSA (genrsa)
# - a chave eh protegida pelo algoritmo AES-128/192/256 (-aes128/192/256) (KEK)
# - arquivo de saida (-out private.key)
# - tamanho da chave (2048)
$ openssl genrsa -aes128 -out particula_private.key 2048

# visualizar a estrutura da chave de criptografia
$ openssl rsa -text -in private.key

# exportar a chave publica
$ openssl rsa -in particula_private.key -pubout -out particula_public.key

# Chave do tipo DSA
#
# criacao da chave de criptografia do tipo DSA
$ openssl dsaparam -genkey 2048 | openssl dsa -out dsa.key -aes128

# Chave do tipo ECDSA
#
# criacao da chave de criptografia do tipo ECDSA
$ openssl ecparam -genkey -name secp256r1 | openssl ec -out ec.key -aes128

3.2 - Criacao do "Certificate Signing Request" (CSR)

# o certificado contem a chave publica do requerente e algumas informacoes sobre
# o requerente.

# comando utilizado para criar o certificado CSR.
$ openssl req -new -key particula_private.key -out particula.csr

# antes de se enviar o certificado para a CA para ser assinado, eh interessante dar
# uma olhada no conteudo do certificado CSR para confirmar as informacoes que foram
# gravadas no certificado.
$ openssl req -text -in particula.csr -noout

3.3 - Criando um CSR a partir de um certificado j√© existente

# as vezes eh necessario a re-criacao de um CSR a partir de um certificado ja existente,
# visto que nao foi feito nenhum tipo de alteracao nas informacoes do certificado. Para
# isso, basta executar o comando abaixo.
$ openssl x509 -x509toreq -in particula.crt -out particula.csr -signkey particula_private.key

3.4 - Criando um CSR a partir de um arquivo de configuracao

# existe a possibilidade de se criar um arquivo CSR de forma nao interativa, a partir
# de um arquivo de configuracao.
$ cat particula.cnf
	[req]
	prompt = no
	distinguished_name = dn
	req_extensions = ext
	input_password = [SENHA]

	[dn]
	CN = www.particula.local
	emailAddress = admin@particula.local
	O = particula ltda
	L = sao paulo
	C = br

	[ext]
	subjectAltName = DNS:www.particula.local,DNS:particula.local

# criacao do arquivo CSR a partir do arquivo "particula.cnf".
$ openssl req -new -config particula.cnf -key particula_private.key -out particula.csr

3.5 - Assinando o seu proprio certificado

# se por acaso "voce" possuir um servidor TLS para uso proprio, nao sera necessario
# a utilizacao de uma CA para assinar um certificado. DEsta forma, eh possivel auto
# assinar o certificado.
#
# criacao cd um certificado auto-assinado.
$ openssl x509 -req -days 365 -in particula.csr -signkey particula_private.key -out particula.crt

# eh possivel tambem criar um certificado auto-assinado a partir da chave privada.
$ openssl req -new -x509 -days 365 -key particula_private.key -out particula.crt
$ openssl req -new -x509 -days 365 -key particula_private.key -out particula.crt -subj "/C=br/L=sao paulo/O=particula ltda/CN=www.particula.local"

3.6 - Criando um certificado para mais de um hostname

# normalmente um certificado eh associado a somente um hostname, mas em determinadas
# situacoes, eh necessario que um certificado seja associado a mais de um hostname.
#
# existe dois mecanismos para suportar multiplos hostnames em um unico certificado. A
# primeria eh utilizando a extensao SAN (Subject Alternative Name) do protocolo X.509. A
# segunda opcao eh a utilizacao de wildcards, particula.local e *.particula.local).
$ cat particula.ext
	subjectAltName = DNS:*.particula.local,DNS:particula.local
$ openssl req -new -x509 -days 365 -key particula_private.key -out particula.crt -extfile particula.ext

3.7 - Examinar o certificado

# visualizacao do certificado
$ openssl req -text -in particula.crt -noout

3.8 - Convertendo o certificado

# - Certificado binario DER 
# contem o certificado X.509 no formato raw, utilizando a codificacao ASN.1.
# - Certificado ASCII PEM
# contem o certificado no formato de codificacao base64-encoded.
# - Chave binaria DER
# contem a chave primaria no formato raw, utilizando a codificacao DER ANS.1
# - Chave ASCII PEM
# contem a chave no formato de codificacao base64-encoded.
# - Certificado PKCS#7
# formato complexo do certificado desenhado para transportar assinado ou criptografado
# de dados.
# - Chave e certificado PKCS#12 PFX
# Consiste de um formato complexo que pode armazenar e proteger a chave do servidor em 
# torno de toda a corrente de certificados.

# conversao do formato DEM para o DER
$ openssl x509 -inform PEM -in particula.pem -outform DER -out particula.der

# conversao do formato DER para o PEM
$ openssl x509 -inform DER -in particula.der -outform PEM -out particula.pem

# conversao do formato PEM para o PKCS#12
$ openssl pkcs12 -export -name "Certificado Particula" -out particula.p12 -inkey particula.key -in particula.crt -certfile particula-chain.crt

# conversao do formato PEM para o PKCS#7
$ openssl crl2pkcs7 -nocrl -out fd.p7b -certfile fd.crt -certfile fd-chain.crt

# conversao do formato PKCS#7 para o PEM 
# openssl pkcs7 -in particula.p7b -print_certs -out particula.pem

4. Create, operate and secure a certification authority



5. Request, sign and manage server and client certificates
6. Revoke certificates and certification authorities