###
#
# STDIN STDOUT STDERROR
#
###

# stdin 
# 	entrada padrao 
# 	< 
# 	escritor de arquivos 0
# 
# stdout 
# 	saida padrao
# 	< ou >> 
# 	escritor de arquivos 1
# 
# stderr 
# 	erro padrao
# 	escritor de arquivos 2
# 
# o resultado do comando "ls" sera redirecionado para 
# a saida padrao que eh o arquivo stdout.txt. Esse 
# redirecionamento eh feito atraves do operador >
#
cosmo@debian:~/myProject/lpi$ ls -l /etc/ > stdout.txt 
cosmo@debian:~/myProject/lpi$ cat stdout.txt 
drwxr-xr-x  3 root root    4096 Apr 12 17:32 acpi
-rw-r--r--  1 root root    2981 Apr 12 17:32 adduser.conf
-rw-r--r--  1 root root      44 May 30 10:06 adjtime
-rw-r--r--  1 root root     197 May  5 10:48 aliases
(...)

# o resultado do comando "ls" sera redirecionado para 
# a saida padrao que eh o arquivo stdout.txt. Esse 
# redirecionamento eh feito atraves do operador 1>
#
cosmo@debian:~/myProject/lpi$ ls -l /etc/ 1> stdout.txt 
cosmo@debian:~/myProject/lpi$ cat stdout.txt 
drwxr-xr-x  3 root root    4096 Apr 12 17:32 acpi
-rw-r--r--  1 root root    2981 Apr 12 17:32 adduser.conf
-rw-r--r--  1 root root      44 May 30 10:06 adjtime
-rw-r--r--  1 root root     197 May  5 10:48 aliases
(...)

# No exemplo abaixo, partindo do presuposto de que o 
# diretorio /ETC nao exista, quando o comando "ls /ETC"
# eh executado, isso ira resultar em uma mensagem de 
# erro. Mesmo utilizando o operado > para 
# redirecionar a mensagem de erro para um arquivo, 
# isso nao ira funcioanr.
# 
cosmo@debian:~/myProject/lpi$ ls /ETC > stdout.txt 
ls: cannot access /ETC: No such file or directory
cosmo@debian:~/myProject/lpi$ cat stdout.txt 
cosmo@debian:~/myProject/lpi$ 

# Eh necessario utilizar o operador 2> para 
# redirecionar a mensagem de ERRO para um arquivo.
# 
cosmo@debian:~/myProject/lpi$ ls -l /ETC 2> stdout.txt 
cosmo@debian:~/myProject/lpi$ cat stdout.txt
ls: cannot access /ETC: No such file or directory

# No exemplo abaixo, o operador 1> ira redirecionar
# o resultado do comando "ls /etc" para a saida padrao,
# que eh o arquivo stdout.txt. Ja o operador 2>
# ira redirecionar a mensagem de erro causado pelo
# comando "ls /ETC", visto que odiretorio /ETC nao
# existe, para o arquivo stderror.txt
#
cosmo@debian:~/myProject/lpi$ ls /etc/ /ETC 1> stdout.txt 2> stderror.txt
cosmo@debian:~/myProject/lpi$ cat stdout.txt 
/etc/:
acpi
adduser.conf
adjtime
aliases
(...)
cosmo@debian:~/myProject/lpi$ cat stderror.txt 
ls: cannot access /ETC: No such file or directory

# No exemplo abaixo, o operador 1> ira redirecionar o
# o resultado do comando "ls /etc" para a saida padrao, 
# que eh o arquivo stdout.txt. Ja os operadores 2>&1
# irao redirecionar o resultado do coamndo "ls /ETC", que 
# eh uma mensagem de erro, para a saida padrao que eh o 
# arquivo stdout.txt
#
cosmo@debian:~/myProject/lpi$ ls /etc/ /ETC 1> stdout.txt 2>&1
cosmo@debian:~/myProject/lpi$ cat stdout.txt 
ls: cannot access /ETC: No such file or directory
/etc/:
acpi
adduser.conf
adjtime
aliases
(...)

# No exemplo abaixo, o operador &> ira redirecionar o
# resultado do comando "ls /etc" para a saida padrao. Ja
# a mensagem de erro, tambem sera redirecionado para a
# saida padrao.
#
# em relacao ao exemplo anterios ( 1> + 2>&1 = &> )
#
cosmo@debian:~/myProject/lpi$ ls /etc/ /ETC &> stdout.txt 
cosmo@debian:~/myProject/lpi$ cat stdout.txt 
ls: cannot access /ETC: No such file or directory
/etc/:
acpi
adduser.conf
adjtime
aliases
(...)

# Utilizando o operador <, o arquivo /etc/passwd sera
# redirecionado para o camando cat. Isso é um exemplo
# da opcao de STDIN. O recustado do comando sera
# redirecionado para o arquivo stdout.txt. Exemplo
# da opcao STDOUT.
# 
cosmo@debian:~/myProject/lpi$ cat < /etc/passwd > stdout.txt
cosmo@debian:~/myProject/lpi$ cat stdout.txt 
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
(...)


###
#
# TEE
#
###

# o comando tee le o conteudo da entrada e redireciona
# o conteudo para um arquivo e para a tela.
#

# o resultado do comando LS sao redirecionados para
# o comando tee. Alem de ser exibido na tela o resultado
# do comando LS, sera enviado para o arquivo tee_saida.txt
#
cosmo@debian:~/myProject/lpi$ ls | tee tee_saida.txt
101_1.txt
101_2.txt
101_3.txt
102_2.txt
102_3.txt
103_1.txt
103_2.txt
103_3.txt
(...)

# resultado do arquivo tee_saida.txt
#
cosmo@debian:~/myProject/lpi$ cat tee_saida.txt 
101_1.txt
101_2.txt
101_3.txt
102_2.txt
102_3.txt
103_1.txt
103_2.txt
103_3.txt
(...)

###
#
# XARGS
#
###

# o aplicativo xargs le dados da entrada padrão (stdin) e executa o 
# comando (fornecido como argumento) uma ou mais vezes com base na 
# leitura de entrada.
#

# no exemplo abaixo, sera executado primeiramente o comando
# find que tera como resultado a exibicao de uma serie de 
# arquivos. Logo em seguida, o xargs ira executar o comando
# grep dentro de cada arquivo TXT e verificar se existe a
# string "vi". Se sim, entao sera exibido o conteudo.
#
cosmo@debian:~/myProject/lpi$ find /home/cosmo/myProject/lpi/ -name "*.txt" | xargs grep "vi"

# no exemplo abaixo. o comando CAT ira ler o conteudo do arquivo xargs.db
# e ira enviar o resultado para o xargs que ira criar cada os arquivos -n 1.
#
cosmo@debian:~/myProject/lpi$ cat xargs.db
xargs_1
xargs_2
xargs_3
xargs_4
cosmo@debian:~/myProject/lpi$ cat xargs.db | xargs -n 1 touch
